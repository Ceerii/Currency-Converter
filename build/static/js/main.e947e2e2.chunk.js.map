{"version":3,"sources":["home.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","currencies","base","amount","convertTo","result","date","handleSelect","e","_this$setState","_this","setState","Object","defineProperty","target","name","value","calculate","handleInput","isNaN","fetch","concat","then","res","json","data","rates","toFixed","_this$state","this","react_default","a","createElement","className","onChange","type","map","currency","key","disabled","React","Component","App","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OA4FeA,mNAtFXC,MAAM,CACCC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAChDC,KAAK,MACLC,OAAQ,GACRC,UAAU,GACVC,OAAO,GACPC,KAAK,MAGZC,aAAe,SAACC,GAAM,IAAAC,EACpBC,EAAKC,UAALF,EAAA,GAAAG,OAAAC,EAAA,EAAAD,CAAAH,EACKD,EAAEM,OAAOC,KAAOP,EAAEM,OAAOE,OAD9BJ,OAAAC,EAAA,EAAAD,CAAAH,EAAA,SAEW,MAFXA,GAIAC,EAAKO,cAKPC,YAAc,SAACV,GACXE,EAAKC,SAAS,CACXR,OAAQK,EAAEM,OAAOE,MACjBX,OAAQ,MAEXK,EAAKO,cAKPA,UAAY,WACR,IAAMd,EAASO,EAAKV,MAAMG,OACvBA,IAAWgB,OAGZC,MAAK,+CAAAC,OAAgDX,EAAKV,MAAME,OAC/DoB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACF,IAAMnB,EAAOmB,EAAKnB,KACZD,GAAUoB,EAAKC,MAAMhB,EAAKV,MAAMI,WAAaD,GAAQwB,QAAQ,GACnEjB,EAAKC,SAAS,CACVN,SACAC,oFAKR,IAAAsB,EACwDC,KAAK7B,MAA1DC,EADH2B,EACG3B,WAAYC,EADf0B,EACe1B,KAAMC,EADrByB,EACqBzB,OAAQC,EAD7BwB,EAC6BxB,UAAWC,EADxCuB,EACwCvB,OAAQC,EADhDsB,EACgDtB,KACpD,OACIwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,sBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkB9B,EAA/B,IAAwCD,EAAxC,gBACA4B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAA8B,OAAX5B,EAAkB,kBAAmBA,EAArE,IAA8ED,GAC9E0B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,SAA2B3B,GAC3BwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,SAAOE,SAAUL,KAAKX,YAAaiB,KAAK,SAAUnB,MAAOb,EAAQ8B,UAAU,cAC3EH,EAAAC,EAAAC,cAAA,UAAQjB,KAAK,OAAOC,MAAOd,EAAMgC,SAAUL,KAAKtB,aAAe0B,UAAU,gBACxEhC,EAAWmC,IAAI,SAAAC,GAAQ,OAAGP,EAAAC,EAAAC,cAAA,UAAQM,IAAKD,EAAUrB,MAAOqB,GACnDA,OAMNP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,SAAOO,UAAU,EAAQvB,MAAkB,OAAXX,EAAkB,kBAAmBA,EAAQ4B,UAAU,YAAYE,KAAK,WACxGL,EAAAC,EAAAC,cAAA,UAAQjB,KAAK,YAAYC,MAAOZ,EAAW8B,SAAUL,KAAKtB,aAAc0B,UAAU,gBACjFhC,EAAWmC,IAAI,SAAAC,GAAQ,OAAGP,EAAAC,EAAAC,cAAA,UAAQM,IAAKD,EAAUrB,MAAOqB,GACnDA,iBAxECG,IAAMC,YCSVC,mLAPX,OACCZ,EAAAC,EAAAC,cAACW,EAAD,aAHaH,IAAMC,WCQJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.e947e2e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\n\r\nclass Home extends React.Component{\r\n\r\n    state={\r\n           currencies: ['USD', 'AUD', 'NGN', 'EUR', 'SGD', 'PHP', ],\r\n           base:'USD',\r\n           amount: '',\r\n           convertTo:'',\r\n           result:'',\r\n           date:''\r\n    };\r\n\r\n    handleSelect = (e) => {\r\n      this.setState({\r\n          [e.target.name]: e.target.value,\r\n          result:null\r\n      },\r\n      this.calculate\r\n      );\r\n\r\n    };\r\n\r\n    handleInput = (e) => {\r\n        this.setState({\r\n           amount: e.target.value,\r\n           result: null\r\n        },\r\n        this.calculate\r\n        );\r\n  \r\n      };\r\n\r\n      calculate = () => {\r\n          const amount = this.state.amount;\r\n          if(amount === isNaN){\r\n              return\r\n          }else{\r\n            fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const date = data.date;\r\n                const result = (data.rates[this.state.convertTo] * amount).toFixed(4);\r\n                this.setState({\r\n                    result,\r\n                    date\r\n                });\r\n            });\r\n          }\r\n      };   \r\n    render(){\r\n        const {currencies, base, amount, convertTo, result, date} = this.state\r\n        return(\r\n            <div className=\"container\">\r\n            <div className=\"container-text\">\r\n            <p className=\"title\">CURRENCY CONVERTER</p>\r\n            <p className=\"first-currency\">{amount} {base} is equal to</p>\r\n            <p className=\"second-currency\">{result === null ? \"Calculating... \": result} {convertTo}</p>\r\n            <p className=\"time\">As of {date}</p>\r\n            <div className=\"input-value\">\r\n            <form className=\"input-form\">\r\n            <input onChange={this.handleInput} type=\"number\"  value={amount} className=\"input-box\"   />\r\n            <select name=\"base\" value={base} onChange={this.handleSelect}  className=\"input-select\">\r\n            {currencies.map(currency =><option key={currency} value={currency}>\r\n                 {currency}\r\n              </option>\r\n                )}\r\n            </select>\r\n            </form>\r\n\r\n            <form className=\"input-form\">\r\n            <input disabled={true}   value={result === null ? \"Calculating... \": result} className=\"input-box\" type=\"number\"/>\r\n            <select name=\"convertTo\" value={convertTo} onChange={this.handleSelect} className=\"input-select\">\r\n            {currencies.map(currency =><option key={currency} value={currency}>\r\n                 {currency}\r\n              </option>\r\n                )}\r\n            </select>\r\n            </form>\r\n\r\n            </div>\r\n\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default Home;","import React from 'react';\nimport Home from './home';\nimport './App.css';\n\nclass App extends React.Component{\n  render(){\n    return (\n     <Home/>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}